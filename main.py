import asyncio
import logging

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.command import Command
import re #—Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
import data_base
import charts
import data_base, request, navigation
from aiogram.enums import ParseMode
from datetime import datetime
import os
from PIL import Image

MAX_FILE_SIZE_MB = 10  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –º–µ–≥–∞–±–∞–π—Ç–∞—Ö
MAX_FILE_SIZE_BYTES = MAX_FILE_SIZE_MB * 1024 * 1024


async def send_photo_split_if_needed(chat_id, photo_path, bot, navigation, date):
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    file_size = os.path.getsize(photo_path)

    if file_size < MAX_FILE_SIZE_BYTES:
        # –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –º–µ–Ω—å—à–µ 10 –ú–ë, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
        await bot.send_photo(chat_id, photo=types.FSInputFile(photo_path),
                             caption="üí∞<b>–í–∞—à –æ—Ç—á—ë—Ç –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º</b>üí∞",
                             parse_mode='HTML',
                             reply_markup=await navigation.get_keyboard(date))
    else:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –±–æ–ª—å—à–µ 10 –ú–ë, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏
        await split_and_send_image(chat_id, photo_path, bot, navigation, date)


def is_solid_line(img, center_y, width):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ª–∏–Ω–∏—è –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–π –≤—ã—Å–æ—Ç–µ –æ–¥–Ω–æ—Ä–æ–¥–Ω–æ–π –ø–æ —Ü–≤–µ—Ç—É (800 –ø–∏–∫—Å–µ–ª–µ–π –æ—Ç —Ü–µ–Ω—Ç—Ä–∞)"""
    if center_y >= img.height or center_y < 0:
        return False  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –≤—ã—Å–æ—Ç–µ

    center_x = width // 2
    line_color = img.getpixel((center_x, center_y))  # –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –ø–∏–∫—Å–µ–ª—è

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º 400 –ø–∏–∫—Å–µ–ª–µ–π –≤–ª–µ–≤–æ –∏ 400 –ø–∏–∫—Å–µ–ª–µ–π –≤–ø—Ä–∞–≤–æ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
    for x in range(max(center_x - 400, 0), min(center_x + 400, width)):
        if img.getpixel((x, center_y)) != line_color:
            return False  # –õ–∏–Ω–∏—è –Ω–µ –æ–¥–Ω–æ—Ä–æ–¥–Ω–∞—è
    return True  # –õ–∏–Ω–∏—è –æ–¥–Ω–æ—Ä–æ–¥–Ω–∞—è


async def split_and_send_image(chat_id, photo_path, bot, navigation, date):
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    img = Image.open(photo_path)

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º, –Ω–∞ —Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π –Ω–∞–¥–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    width, height = img.size
    num_splits = int(os.path.getsize(photo_path) / MAX_FILE_SIZE_BYTES) + 1
    split_height = height // num_splits

    start_y = 0  # –ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è

    for i in range(num_splits):
        end_y = min(start_y + split_height, height)  # –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ —Ä–∞–∑—Ä–µ–∑–∞

        # –ò—â–µ–º —Å–ø–ª–æ—à–Ω—É—é –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –≤ —Ç–æ—á–∫–µ —Ä–∞–∑—Ä–µ–∑–∞
        while end_y < height and not is_solid_line(img, end_y, width):
            end_y += 4  # –ï—Å–ª–∏ –ª–∏–Ω–∏—è –Ω–µ –æ–¥–Ω–æ—Ä–æ–¥–Ω–∞—è, —Å–¥–≤–∏–≥–∞–µ–º—Å—è –Ω–∞ 2 –ø–∏–∫—Å–µ–ª—è –≤–Ω–∏–∑

        # –í—ã—Ä–µ–∑–∞–µ–º —á–∞—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        cropped_img = img.crop((0, start_y, width, end_y))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç—Ç—É —á–∞—Å—Ç—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_path = f"temp_part_{i}.png"
        cropped_img.save(temp_path)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å reply_markup –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏
        reply_markup = await navigation.get_keyboard(date) if i == num_splits - 1 else None

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        await bot.send_photo(chat_id, photo=types.FSInputFile(temp_path), reply_markup=reply_markup)

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        os.remove(temp_path)

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        start_y = end_y


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ —á–∞—Ç
async def check_command_syntax(text, user_id):
    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–º–∞–Ω–¥—ã: —á–∏—Å–ª–æ, —á–∏—Å–ª–æ, —Ç–µ–∫—Å—Ç
    pattern1 = r'^\d+(\.\d+)?\s+\d+(\.\d+)?\s+.+$'

    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–º–∞–Ω–¥—ã: –º–∏–Ω—É—Å, –ø—Ä–æ–±–µ–ª, —Ç–µ–∫—Å—Ç
    pattern2 = r'^-\s+.+$'

    spl_text = text.split(' ')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–µ—Ä–≤–æ–º—É –∏–ª–∏ –≤—Ç–æ—Ä–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É –∫–æ–º–∞–Ω–¥—ã.
    if re.match(pattern1, text) and len(spl_text) == 3:
        if data_base.check_existing_purchase(user_id, spl_text[2]):
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await data_base.add_purchase_to_database(user_id, spl_text[2], spl_text[1], spl_text[0])
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞. –ó–∞–Ω–æ—Å–∏–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É
            await bot.send_message(user_id, f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\n\n–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: <b>{spl_text[2]}</b> \n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{spl_text[1]}</b> \n–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{spl_text[0]}</b>", reply_markup= await navigation.keyboard_category(), parse_mode=ParseMode.HTML)

    elif re.match(pattern2, text) and len(spl_text) == 2:
        await data_base.delete_purchase_by_name(user_id, spl_text[1])


async def add_new_purchase_from_qr(user_id, product_name, quantity, unit_cost):
    if data_base.check_existing_purchase(user_id, product_name):
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await data_base.add_purchase_to_database(user_id, product_name, quantity, unit_cost)
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞. –ó–∞–Ω–æ—Å–∏–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É
        await bot.send_message(user_id, f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\n\n–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: <b>{product_name}</b> \n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{quantity}</b> \n–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{unit_cost}</b>", reply_markup=await navigation.keyboard_category(), parse_mode=ParseMode.HTML)


# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)
# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token="YOUR_TOKEN")
# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    kb = [[types.KeyboardButton(text="–û–¢–ß–ï–¢")]]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer("üî¥<b>–ò–ù–°–¢–†–£–ö–¶–ò–Ø</b>üî¥\n\n–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç:\n1. (<b>–°—Ç–æ–∏–º–æ—Å—Ç—å_–µ–¥–∏–Ω–∏—Ü—ã</b>)\n2. (<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</b>)\n3. (<b>–ù–∞–∑–≤–∞–Ω–∏–µ_–ø—Ä–æ–¥—É–∫—Ç–∞</b>)\n–ù–∞–ø—Ä–∏–º–µ—Ä: 100 1 –∫–∞—Ä—Ç–æ—à–∫–∞\n\n<b>–ò–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —á–µ–∫ —Å QR-–∫–æ–¥–æ–º.</b>\n\n<b>–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç:</b>\n(<b>-</b>) (<b>–ù–∞–∑–≤–∞–Ω–∏–µ_–ø—Ä–æ–¥—É–∫—Ç–∞</b>)\n–ù–∞–ø—Ä–∏–º–µ—Ä: - –∫–∞—Ä—Ç–æ—à–∫–∞.", reply_markup=keyboard, parse_mode='HTML')

    await data_base.add_user_to_database(message.chat.id, message.chat.username, message.chat.first_name)

    await bot.send_photo(message.chat.id, photo=types.FSInputFile(await navigation.create_photo(message.chat.id, datetime.now())), caption="üí∞<b>–í–∞—à –æ—Ç—á—ë—Ç –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º</b>üí∞", parse_mode='HTML', reply_markup=await navigation.get_keyboard(datetime.now()))


@dp.message(F.photo)
async def handle_photo(message: types.Message):
    await bot.download(message.photo[-1], destination=(f"user_data/{message.photo[-1].file_id}.jpg"))
    await bot.delete_message(message.from_user.id, message.message_id)

    purchases = await request.get_info_qr(f"user_data/{message.photo[-1].file_id}.jpg")
    os.remove(f"user_data/{message.photo[-1].file_id}.jpg")
    # –í—ã–≤–µ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    for purchase in purchases:
        product_name = purchase['–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞']

        while not product_name[0].isalpha():
            product_name = product_name[1:]

        await add_new_purchase_from_qr(message.chat.id, purchase['–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞'], purchase['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'], purchase['–°—Ç–æ–∏–º–æ—Å—Ç—å –µ–¥–∏–Ω–∏—Ü—ã'])


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –ø—Ä–∏—Å–ª–∞–Ω–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message(F.text)
async def some_message(message: types.Message):
    ms = message.text.replace(',', '.')

    await bot.delete_message(message.chat.id, message.message_id)
    if ms == "–û–¢–ß–ï–¢":
        # await bot.send_photo(message.chat.id,
                       #photo=types.FSInputFile(await navigation.create_photo(message.chat.id, datetime.now())),
                       #caption="üí∞<b>–í–∞—à –æ—Ç—á—ë—Ç –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º</b>üí∞", parse_mode='HTML',
                       #reply_markup=await navigation.get_keyboard(datetime.now()))
        await bot.send_message(message.chat.id, "üí∞<b>–í–∞—à –æ—Ç—á—ë—Ç –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º</b>üí∞", parse_mode='HTML')
        await send_photo_split_if_needed(
            message.chat.id,
            await navigation.create_photo(message.chat.id, datetime.now()),
            bot,
            navigation,
            datetime.now()
        )

    else:
        await check_command_syntax(ms.lower(), message.chat.id) # –≤–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ó–∞–Ω–æ—Å–∏—Ç –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É.
@dp.callback_query(lambda query: F.data.startswith('add_bd_') and not query.data.startswith('next_data_') and not query.data.startswith('last_data') and not query.data.startswith('clear_') and not query.data.startswith('update_') and not query.data.startswith('show_charts'))
async def process_callback_data(query: types.CallbackQuery):
    # –†–∞–∑–±–∏–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
    callback_data_parts = query.data.split('_')
    id_category = callback_data_parts[-1]
    text = query.message.text.split(' ')
    name = ' '.join(text[3:-4])
    count = text[-3]
    cost = text[-1]

    # –£–¥–∞–ª—è–µ–º –≤—ã–≤–µ–¥–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    await bot.delete_message(query.message.chat.id, query.message.message_id)

    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!
    await data_base.add_new_purchase_to_database(query.message.chat.id,id_category,name,count,cost)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞ next
@dp.callback_query(lambda query: F.data.startswith('next_data_') and not query.data.startswith('add_bd_') and not query.data.startswith('last_data') and not query.data.startswith('clear_') and not query.data.startswith('update_') and not query.data.startswith('show_charts'))
async def next_data(query: types.CallbackQuery):
    # –†–∞–∑–±–∏–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
    callback_data_parts = query.data.split('_')
    month = int(callback_data_parts[-1]) + 1
    if month == 13:
        month = 1
    date = datetime.now().replace(day=1, month=int(month))
    await bot.send_message(query.message.chat.id, "üí∞<b>–í–∞—à –æ—Ç—á—ë—Ç –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º</b>üí∞", parse_mode='HTML')
    await send_photo_split_if_needed(
        query.message.chat.id,
        await navigation.create_photo(query.message.chat.id, date),
        bot,
        navigation,
        date
    )

    # await bot.send_photo(query.message.chat.id, photo=types.FSInputFile(await navigation.create_photo(query.message.chat.id, date)), caption="üí∞<b>–í–∞—à –æ—Ç—á—ë—Ç –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º</b>üí∞", parse_mode='HTML', reply_markup=await navigation.get_keyboard(date))
    # await bot.delete_message(query.message.chat.id, query.message.message_id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞ last
@dp.callback_query(lambda query: F.data.startswith('last_data_') and not query.data.startswith('add_bd_') and not query.data.startswith('next_data_') and not query.data.startswith('clear_') and not query.data.startswith('update_') and not query.data.startswith('show_charts'))
async def last_data(query: types.CallbackQuery):
    # –†–∞–∑–±–∏–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
    callback_data_parts = query.data.split('_')
    month = int(callback_data_parts[-1]) - 1
    if month == 0:
        month = 12
    date = datetime.now().replace(day=1, month=int(month))
    await bot.send_message(query.message.chat.id, "üí∞<b>–í–∞—à –æ—Ç—á—ë—Ç –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º</b>üí∞", parse_mode='HTML')
    await send_photo_split_if_needed(
        query.message.chat.id,
        await navigation.create_photo(query.message.chat.id, date),
        bot,
        navigation,
        date
    )

    # await bot.send_photo(query.message.chat.id, photo=types.FSInputFile(await navigation.create_photo(query.message.chat.id, date)), caption="üí∞<b>–í–∞—à –æ—Ç—á—ë—Ç –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º</b>üí∞", parse_mode='HTML', reply_markup=await navigation.get_keyboard(date))
    # await bot.delete_message(query.message.chat.id, query.message.message_id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞ clear
@dp.callback_query(lambda query: F.data.startswith('clear_') and not query.data.startswith('add_bd_') and not query.data.startswith('next_data_') and not query.data.startswith('last_data') and not query.data.startswith('update_') and not query.data.startswith('show_charts'))
async def clear(query: types.CallbackQuery):
    # –†–∞–∑–±–∏–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
    callback_data_parts = query.data.split('_')
    month = int(callback_data_parts[-1])
    date = datetime.now().replace(day=1, month=int(month))

    await data_base.delete_current_month_purchases(query.message.chat.id, month, datetime.now().year)
    await bot.delete_message(query.message.chat.id, query.message.message_id)
    await bot.send_photo(query.message.chat.id, photo=types.FSInputFile(await navigation.create_photo(query.message.chat.id, date)), caption="üí∞<b>–í–∞—à –æ—Ç—á—ë—Ç –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º</b>üí∞", parse_mode='HTML', reply_markup=await navigation.get_keyboard(date))


# –ì–ï–ù–ï–†–ê–¶–ò–Ø –ì–†–ê–§–ò–ö–û–í
@dp.callback_query(F.data.startswith('show_charts'))
async def process_callback_show_charts(query: types.CallbackQuery):
    user_id = query.from_user.id

    callback_data_parts = query.data.split('_')
    month = int(callback_data_parts[-1])

    path_to_img = f'users/{user_id}/'

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞—Ç—Ä–∞—Ç–∞—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü
    df_category = await data_base.get_category_expenses_for_month(user_id, month)

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∑–∞—Ç—Ä–∞—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    await charts.plot_category_expenses(df_category, '–ó–∞—Ç—Ä–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü', path_to_img + 'category_expenses.png')
    await bot.send_photo(query.message.chat.id, photo=types.FSInputFile(path_to_img + 'category_expenses.png'))


# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
